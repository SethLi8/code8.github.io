<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>金刚经</title>
      <link href="/post/a3a48d10.html"/>
      <url>/post/a3a48d10.html</url>
      
        <content type="html"><![CDATA[<p> 应无所住，而生其心</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>markdown技巧</title>
      <link href="/post/3eba34df.html"/>
      <url>/post/3eba34df.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>目录： [TOC]</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p><em>我是斜体</em><br><strong>加粗文字</strong></p><ol><li>有序列表1</li><li>有序列表2</li><li>有序列表3</li></ol><ul><li>无序列表1</li><li>无序列表2</li><li>无序列表3</li></ul><blockquote><p>应无所住，而生其心 –《金刚经》引用</p></blockquote><p>4个‘-’为分割线</p><hr><h3 id="markdown技巧"><a href="#markdown技巧" class="headerlink" title="markdown技巧"></a>markdown技巧</h3><ol><li><p><a href="https://blog.csdn.net/Yuki_fx/article/details/104122544">快捷键汇总</a></p></li><li><p>基本技巧</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/image-20230609084918834.png" alt="基本技巧"></p><p><strong>粗体</strong> ctrl + B</p><p><em>斜体：ctrl + I</em></p><p><u>下划线：ctrl + U</u></p><p>&#x3D;&#x3D;高亮&#x3D;&#x3D;：&#x3D;&#x3D; &#x3D;&#x3D;</p><p>&#x3D;&#x3D;计算机&#x3D;&#x3D;</p><p>上标: s^2^      ^  text ^</p><p>下标：H<del>2</del>O  ~  text ~  </p><p>任务列表：</p><ul><li><input checked="" disabled="" type="checkbox"> 早饭</li><li><input checked="" disabled="" type="checkbox"> 午饭</li><li><input disabled="" type="checkbox"> 晚饭</li></ul><p>行内代码:  <code>int</code> <code>short long</code>  <!--整形--></p><p>代码块： ctrl + shift + k</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello markdown&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>表格： ctrl + T</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><blockquote><p>引用：&gt;</p></blockquote><p><a href="http://localhost:4000/">超链接</a> ：ctrl + k</p><p><a href="http://bilibili.com/">哔哩哔哩</a></p><blockquote><p>ctrl + shift + Q</p></blockquote><hr><h3 id="搭建图床技巧"><a href="#搭建图床技巧" class="headerlink" title="搭建图床技巧"></a>搭建图床技巧</h3><p><a href="https://zhuanlan.zhihu.com/p/489236769">使用Github+picGo搭建图床，保姆级教程来了 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我是模板</title>
      <link href="/post/7c5f0738.html"/>
      <url>/post/7c5f0738.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 博客技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客编写参数介绍</title>
      <link href="/post/f30a51a6.html"/>
      <url>/post/f30a51a6.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>写法解释</p></li><li><p>title【必需】页面标题</p></li><li><p>date【必需】页面创建日期</p></li><li><p>type【必需】标签、分类和友情链接三个页面需要配置</p></li><li><p>updated【可选】页面更新日期</p></li><li><p>description【可选】页面描述</p></li><li><p>keywords【可选】页面关键字</p></li><li><p>comments【可选】显示页面评论模块 (默认 true)</p></li><li><p>top_img【可选】页面顶部图片</p></li><li><p>mathjax【可选】显示mathjax (当设置mathjax的per_page: false时，才需要配置，默认 false)</p></li><li><p>katex【可选】显示katex (当设置katex的per_page: false时，才需要配置，默认 false)</p></li><li><p>aside【可选】显示侧边栏 (默认 true)</p></li><li><p>aplayer【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</p></li><li><p>highlight_shrink【可选】配置代码框是否展开 (true&#x2F;false) (默认为设置中highlight_shrink的配置)</p></li><li><p>random【可选】配置友情链接是否随机排序（默认为 false)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>括号匹配</title>
      <link href="/post/899.html"/>
      <url>/post/899.html</url>
      
        <content type="html"><![CDATA[<p>title: 括号匹配</p><h1 id="栈的简单应用之进制转换、括号匹配"><a href="#栈的简单应用之进制转换、括号匹配" class="headerlink" title="栈的简单应用之进制转换、括号匹配"></a>栈的简单应用之进制转换、括号匹配</h1><p>大家好，这篇博客介绍一下栈的简单应用之<strong>进制转换、括号匹配</strong>，用两个函数实现的，当中用到了<strong>栈的初始化</strong>(InitStack)、<strong>出栈</strong>(Pop)、<strong>入栈</strong>(Push)操作，需要了解的可以去我的博客<a href="https://blog.csdn.net/qq_42577508/article/details/101928776">小白莲的数据结构day06</a>查看这些操作，这里不再赘述。好啊，废话少说，直接往下看看这两个简单操作吧。</p><h2 id="1-进制转换"><a href="#1-进制转换" class="headerlink" title="1.进制转换"></a>1.进制转换</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进制转换</span></span><br><span class="line"><span class="comment">//N为需要转化的十进制非负整数</span></span><br><span class="line"><span class="comment">//n为需要转化成的进制（十进制以内）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">conversion</span><span class="params">(ElemType N,<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="type">int</span> x = N;</span><br><span class="line"><span class="comment">//构建一个空栈并对其初始化</span></span><br><span class="line">Stack <span class="built_in">stack</span>;</span><br><span class="line">InitStack(<span class="built_in">stack</span>);</span><br><span class="line">ElemType data;</span><br><span class="line"><span class="comment">//开始进制转换</span></span><br><span class="line"><span class="keyword">while</span> (N)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Push(<span class="built_in">stack</span>, N % n))</span><br><span class="line">N /= n;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;入栈操作失败!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d转换为%d进制为： &quot;</span>, x, n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//当栈不为空时，出栈</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">stack</span>.top != <span class="built_in">stack</span>.base)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(Pop(<span class="built_in">stack</span>, data))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, data);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;入栈操作失败!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;<span class="comment">//conversion</span></span><br></pre></td></tr></table></figure><h2 id="1-1对进制转换的测试"><a href="#1-1对进制转换的测试" class="headerlink" title="1.1对进制转换的测试"></a>1.1对进制转换的测试</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">conversion(<span class="number">1348</span>,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2对进制转换的测试结果"><a href="#1-2对进制转换的测试结果" class="headerlink" title="1.2对进制转换的测试结果"></a>1.2对进制转换的测试结果</h2><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/2019100616202421.png" alt="在这里插入图片描述"></p><h1 id="2-括号匹配"><a href="#2-括号匹配" class="headerlink" title="2.括号匹配"></a>2.括号匹配</h1><p>这里对括号的匹配只包含了“[ ]” “()”这两种括号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//括号匹配</span></span><br><span class="line"><span class="comment">//遇左括号进栈，右括号出栈</span></span><br><span class="line"><span class="comment">//1.若在匹配过程中栈为空栈，却得到右括号，匹配必然不正确</span></span><br><span class="line"><span class="comment">//即可跳过接下来的判断</span></span><br><span class="line"><span class="comment">//2.若匹配完成后，栈为空，则匹配正确，否则匹配不正确</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">match_bracket</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>];</span><br><span class="line">gets_s(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个栈并对其初始化</span></span><br><span class="line">Stack <span class="built_in">stack</span>;</span><br><span class="line">InitStack(<span class="built_in">stack</span>);</span><br><span class="line">ElemType e;</span><br><span class="line"><span class="type">bool</span>  flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用1、0分别区分‘(’和‘[’</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span> || s[i] == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">Push(<span class="built_in">stack</span>, s[i]==<span class="string">&#x27;(&#x27;</span>?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span> || s[i] == <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">stack</span>.top == <span class="built_in">stack</span>.base) &#123;</span><br><span class="line">Push(<span class="built_in">stack</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">Pop(<span class="built_in">stack</span>, e);</span><br><span class="line"><span class="keyword">if</span> (e != (s[i] == <span class="string">&#x27;)&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>)) &#123;</span><br><span class="line">Push(<span class="built_in">stack</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">stack</span>.top == <span class="built_in">stack</span>.base)</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;括号能正常匹配!\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;括号不能正常匹配！\n&quot;</span>);</span><br><span class="line">&#125;<span class="comment">//match_bracket</span></span><br></pre></td></tr></table></figure><h2 id="2-1对括号匹配的测试"><a href="#2-1对括号匹配的测试" class="headerlink" title="2.1对括号匹配的测试"></a>2.1对括号匹配的测试</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">match_bracket();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1对括号匹配的测试结果"><a href="#2-1对括号匹配的测试结果" class="headerlink" title="2.1对括号匹配的测试结果"></a>2.1对括号匹配的测试结果</h2><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/20191006163234616.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Informer介绍</title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="Informer介绍"><a href="#Informer介绍" class="headerlink" title="Informer介绍"></a><strong>Informer介绍</strong></h1><h2 id="1-Transformer存在的问题"><a href="#1-Transformer存在的问题" class="headerlink" title="1.     Transformer存在的问题"></a>1.     <strong>Transformer存在的问题</strong></h2><p>Informer实质是在Transformer的基础上进行改进，通过修改transformer的结构，提高transformer的速度。那么Transformer有什么样的缺点：</p><p><strong>（1）self-attention的平方复杂度</strong>。self-attention的时间和空间复杂度是O(L^2)，L为序列长度。</p><p><strong>（2）对长输入进行堆叠(stack)时的内存瓶颈</strong>。多个encoder-decoder堆叠起来就会形成复杂的空间复杂度，这会限制模型接受较长的序列输入。</p><p><strong>（3）预测长输出时速度骤降。</strong>对于Tansformer的输出，使用的是step-by-step推理得像RNN模型一样慢，并且动态解码还存在错误传递的问题。</p><h2 id="2-Informer研究背景"><a href="#2-Informer研究背景" class="headerlink" title="2.     Informer研究背景"></a>2.     <strong>Informer研究背景</strong></h2><p>论文的研究背景为：长序列预测问题。这些问题会出现在哪些地方呢：</p><p>​                ● 股票预测（数据、规则都在变，模型都是无法预测的）</p><p>​                ● 机器人动作的预测</p><p>​                ● 人体行为识别（视频前后帧的关系）</p><p>​                ● 气温的预测、疫情下的确诊人数</p><p>​                ● 流水线每一时刻的材料消耗，预测下一时刻原材料需要多少….</p><p>​                ● </p><p>那么以上需要时间线来进行实现的，无疑会想到使用Transformer来解决这些问题，Transformer的最大特点就是利用了attention进行时序信息传递。每次进行一次信息传递，我们需要执行两次矩阵乘积，也就是QKV的计算。并且我们需要思考一下，<strong>我们每次所执行的attention计算所保留下来的值是否是真的有效的吗？我们有没有必要去计算这么多attention？</strong></p><p>那么对于现在的时间预测可以大致分为下面三种：</p><p>​                ● 短序列预测</p><p>​                ● 趋势预测</p><p>​                ● 精准长序列预测</p><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/AgAACmAXn_TWAZsyqxNET5pEu6jJHUb8.png"></p><p>很多算法都是基于短序列进行预测的，先得知前一部分的数据，之后去预测短时间的情况。想要预测一个长序列，就不可以使用短预测，预测未来半年or一年，很难预测很准。长序列其实像是滑动窗口，不断地往后滑动，一步一步走，但是越滑越后的时候，他一直在使用预测好的值进行预测，长时间的序列预测是有难度的。</p><p>那么有哪些时间序列的经典算法：</p><p>​                ● Prophnet：很实用的工具包，很适合<strong>预测趋势</strong>，但算的不精准。</p><p>​                ● Arima：短序列预测还算精准，但是趋势预测不准。多标签。</p><p>以上两种一旦涉及到了长序列，都不可以使用。</p><p>​                ● Informer中将主要致力于长序列问题的解决</p><p>可能在这里大家也会想到LSTM：但是这个模型在长序列预测中，如果序列越长，那速度肯定越慢，效果也越差。这个模型使用的为串行结构，效率很低，也会基于前面的特征来预测下一个特征，其损失函数的值也会越来越大。</p><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/AgAACmAXn_RHMuVWBFFNubWsJVnPTJpJ.png" alt="img"></p><p>LSTM预测能力限制了LSTF的性能。例如，从长度&#x3D;48开始，MSE上升得高得令人无法接受，推理速度迅速下降。</p><p>那么我们Transformer中也有提及到改进LSTM的方法，其优势和问题在于：</p><p>（1）万能模型，可直接套用，代码实现简单。</p><p>（2）并行的，比LSTM快，全局信息丰富，注意力机制效果好。</p><p>（3）长序列中attention需要每一个点跟其他点计算，如果序列太长，其效率很低。</p><p>（4）Decoder输出很麻烦，都要基于上一个预测结果来推断当前的预测结果，这对于一个长序列的预测中最好是不要出现这样的情况。</p><p>那么Informer就需要解决如下的问题：</p><table><thead><tr><th><strong>Transformer的缺点</strong></th><th><strong>Informer的改进</strong></th></tr></thead><tbody><tr><td>self-attention平方级的计算复杂度</td><td>提出<strong>ProbSparse Self-attention</strong>筛选出最重要的Q，降低计算复杂度</td></tr><tr><td>堆叠多层网络，内存占用瓶颈</td><td>提出<strong>Self-attention Distilling</strong>进行下采样操作，减少维度和网络参数的数量</td></tr><tr><td>step-by-step解码预测，速度较慢</td><td>提出<strong>Generative Style Decoder</strong>，一步可以得到所有预测的</td></tr></tbody></table><h2 id="3-Informer-整体架构"><a href="#3-Informer-整体架构" class="headerlink" title="3.     Informer 整体架构"></a>3.     <strong>Informer 整体架构</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/AgAACmAXn_SSMj48X3ZPcKRrc3rx8K0X.png" alt="img"></p><h3 id="3-1-ProbSparse-Self-attention"><a href="#3-1-ProbSparse-Self-attention" class="headerlink" title="3.1 ProbSparse Self-attention"></a><strong>3.1 ProbSparse Self-attention</strong></h3><p>通过以下图数据可以看到，并不是每个QK的点积都是有效值，我们也不需要花很多时间在处理这些数据上：</p><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/prob.png" alt="prob"></p><p>这个结果也是合理的，<strong>因为某个元素可能只和几个元素高度相关，和其他的元素并没有很显著的关联。如果我们要提高计算效率的话，我们需要关注那些有特点的那些值</strong>，那我们要怎么去关注那些有特点的值呢：</p><p>我们需要进行一次Query稀疏性的衡量：</p><p>作者从概率的角度看待自注意力，定义</p><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/image-20230609203055720.png" alt="image-20230609203055720"></p><p>是概率的形式，即在给定第i个query的条件下key的分布。</p><p>作者认为，如果算出来的这个结果接近于均匀分布</p><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/image-20230609203032684.png" alt="image-20230609203032684"></p><p>，那么就说明这个query是在偷懒，没办法选中那些重要的Key，如果反之，就说明这个Q为积极的，活跃的：</p><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/AgAACmAXn_TRQVyPWp5LTooVUuqz_JNV.png" alt="img"></p><p>其计算公式如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/AgAACmAXn_SxVaBl65RHzLxNYsjRAVjq.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/AgAACmAXn_TgA8v2yV5GqpeTiF3iaF2n.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/AgAACmAXn_RJBk-WmqhMOpIn8bI6--ev.png" alt="img"></p><p> 之后我们进行比较：</p><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/AgAACmAXn_QqvWltNENDrqbWSPUM5uqd.png" alt="img"></p><p>我们算出了其概率以及与均匀分布的差异，如果差异越大，那么这个Q就有机会去被关注、说明其起到了作用。那么其计算方法到底是怎么样进行的，我们要取哪些Q哪些K进行计算:</p><p>（1）输入序列长度为96，首先在K中进行采样，随机选取25个K。</p><p>（2）计算每个Q与25个K的点积，可以得到M(qi,K)，现在一个Q一共有25个得分</p><p>（3）在25个得分中，选取最高分的那个Q与均值算差异。</p><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/AgAACmAXn_S6vVNOPepOnbc96hbjQ4rH.png" alt="img"></p><p>（4）这样我们输入的96个Q都有对应的差异得分，我们将差异从大到小排列，选出差异前25大的Q。</p><p>（5）那么传进去参数例如：[32,8,25,96]，代表的意思为输入96个序列长度，32个batch，8个特征，25个Q进行处理。</p><p>（6）其他位置淘汰掉的Q使用均匀方差代替，不可以因为其不好用则不处理，需要进行更新，保证输入对着有输出。</p><p>以上的时间复杂度为O(L ln L)：</p><p>ProbSparse Attention在为每个Q随机采样K时，每个head的采样结果是相同的，也就是采样的K是相同的。但是由于每一层self-attention都会对QKV做线性转换，这使得序列中同一个位置上不同的head对应的QK都不同，那么每一个head对于Q的差异都不同，这就使得每个head中的得到的前25个Q也是不同的。这样也等价于每个head都采取了不同的优化策略。</p><h3 id="3-2-Self-attention-Distilling"><a href="#3-2-Self-attention-Distilling" class="headerlink" title="3.2 Self-attention Distilling"></a><strong>3.2 Self-attention Distilling</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/AgAACmAXn_S3XghjW9RMzK0AOG4k82p8.png" alt="img"></p><p> 这一层类似于下采样。将我们输入的序列缩小为原来的二分之一。作者在这里提出了自注意力蒸馏的操作，具体是在相邻的的Attention Block之间加入卷积池化操作，来对特征进行降采样。为什么可以这么做，在上面的ProbSparse Attention中只选出了前25个Q做点积运算，形成Q-K对，其他Q-K对则置为0，所以当与value相乘时，会有很多冗余项。这样也可以突出其主要特征，也降低了长序列输入的空间复杂度，也不会损失很多信息，大大提高了效率。</p><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/AgAACmAXn_QlNGOH3Y9N3qLk5yvj8mYp.png" alt="img"></p><p>另外，作者为了提高encoder的鲁棒性，还提出了一个strick。途中输入embedding经过了三个Attention Block，最终得到Feature Map。还可以再复制一份具有一半输入的embedding，让它让经过两个Attention Block，最终会得到和上面维度相同的Feature Map，然后把两个Feature Map拼接。作者认为这种方式对短周期的数据可能更有效一些。</p><h3 id="3-3-Generative-Style-Decoder"><a href="#3-3-Generative-Style-Decoder" class="headerlink" title="3.3 Generative Style Decoder"></a><strong>3.3 Generative Style Decoder</strong></h3><p>对于Transformer其输出是先输出第一个，再基于第一个输出第二个，以此类推。这样子效率慢并且精度不高。看看总的架构图可以发现，decoder由两部分组成：<strong>第一部分为encoder的输出，第二部分为embedding后的decoder输入，即用0掩盖了后半部分的输入。</strong></p><p>看看Embedding的操作：</p><p>​                ● Scalar是采用conv1d将1维转换为<strong>512维</strong>向量。</p><p>​                ● Local Time Stamp采用Transformer中的<strong>Positional Embedding</strong>。</p><p>​                ● Gloabal Time Stamp则是上述处理后的<strong>时间戳</strong>经过Embedding。可以添加上我们的年月日时。</p><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/AgAACmAXn_T9D3GD1WdFYKGQstUX2uUz.png" alt="img"></p><p>这种位置编码信息有比较丰富的返回，不仅有绝对位置编码，还包括了跟时间相关的各种编码。</p><p>最后，使用三者相加得到最后的输入(shape:[batch_size,seq_len,d_model])。</p><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/AgAACmAXn_QZ-FSECj1GmoDoWZq2zbbi.png" alt="img"></p><p>Decoder的最后一个部分是过一个linear layer将decoder的输出扩展到与vocabulary size一样的维度上，经过softmax后，选择概率最高的一个word作为预测结果。</p><p>那么假设我们有一个已经训练好的Transformer的神经网络，在预测时，传统的步骤是step by step的：</p><p>（1）给decoder输入encoder对整个句子embedding的结果和一个特殊的开始符号。decoder将产生预测，产生”I”。</p><p>（2）给decoder输入encoder的embedding结果和“I”，产生预测“am”</p><p>（3）给decoder输入encoder的embedding结果和“I am”，产生预测“a”</p><p>（4）给decoder输入encoder的embedding的结果和“I am a”，产生预测”student“。</p><p>（5）给decoder输入encoder的embedding的结果和“I am a student”，decoder应该生成句子结尾的标记，decoder应该输出“ ”。</p><p>（6）最后decoder生成了，翻译完成。</p><p>那么我们再看看Informer一步到位的预测：</p><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/infor1.png" alt="infor1"></p><p>提供一个start标志位：</p><p>​                ● 要让Decoder输出预测结果，你得先告诉它从哪开始输出。</p><p>​                ● 先给一个引导，比如要输出20-30号的预测结果，Decoder中需先给出。</p><p>​                ● 前面一个序列的结果，例如10-20号的标签值。</p><p>其实我们可以理解为一段有效的标签值带着一群预测值进行学习，效率更高。可以说是生成式推理，作者在这里没有选择一个特定的标记来做开始序列，而是选择了一段长的序列，比如目标序列之前一段已知序列。举例来说如果我们要预测7天的，我们可以把之前5天的信息作为开始序列，那么我们上述的式子</p><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/x123.png" alt="x123"></p><p>这种方法可以一步到位生成目标序列，不需要再使用动态解码。</p><p>对于Decoder输入：</p><p>源码中的decoder输入长度为72，其中前48是真实值，后24是预测值。第一步是做自身的ProbAttention，注意要加上Mask（避免未卜先知）。先计算完自身的Attention。再算与encoder的Attention即可。</p><h2 id="4-Informer的实验性能"><a href="#4-Informer的实验性能" class="headerlink" title="4.     Informer的实验性能"></a>4.     <strong>Informer的实验性能</strong></h2><p>4个数据集(5例)的单变量长序列时间序列预测结果。</p><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/1.png"></p><p>4个数据集(5例)的多变量长序列时间序列预测结果。</p><p><img src="https://cdn.jsdelivr.net/gh/Sql88/BlogImg@main/img/2.png" alt="2"></p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时序预测 </tag>
            
            <tag> LSTF </tag>
            
            <tag> Informer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test</title>
      <link href="/post/784dd132.html"/>
      <url>/post/784dd132.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>靓仔的测试博客</title>
      <link href="/post/c5ca6b6a.html"/>
      <url>/post/c5ca6b6a.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
